package controllers

import (
	"{{ workspace }}/constants"
	"{{ workspace }}/models"
	"{{ workspace }}/services"
	"encoding/json"
	"net/http"

	"strconv"

	"github.com/gorilla/mux"
)

// Add{{ component }}Controllers handles routing for {{ component }} endpoints
func Add{{ component }}Controllers(r *mux.Router) {
	controller := New{{ component }}Controller()
	baseRoute := constants.APIBasePath + "/gyms"

	r.HandleFunc(baseRoute, controller.getAll{{ component }}).Methods("GET")
	r.HandleFunc(baseRoute+"/{id}", controller.get{{ component }}ByID).Methods("GET")
	r.HandleFunc(baseRoute, controller.create{{ component }}).Methods("POST")
	r.HandleFunc(baseRoute+"/{id}", controller.delete{{ component }}ByID).Methods("DELETE")
	r.HandleFunc(baseRoute+"/{id}", controller.update{{ component }}ByID).Methods("PUT")
}

// I{{ component }}Controller interface for {{ component }}Controller
type I{{ component }}Controller interface {
	getAll{{ component }}(w http.ResponseWriter, r *http.Request)
	create{{ component }}(w http.ResponseWriter, r *http.Request)
	get{{ component }}ByID(w http.ResponseWriter, r *http.Request)
	delete{{ component }}ByID(w http.ResponseWriter, r *http.Request)
	update{{ component }}ByID(w http.ResponseWriter, r *http.Request)
}

// {{ component }}Controller implements interface
type {{ component }}Controller struct {
	service services.I{{ component }}Service
}

// New{{ component }}Controller inits {{ component }}Controller
func New{{ component }}Controller() I{{ component }}Controller {
	service := services.New{{ component }}Service()
	return {{ component }}Controller{service}
}

// @GET("/")
func (controller {{ component }}Controller) getAll{{ component }}(w http.ResponseWriter, r *http.Request) {
	response, err := controller.service.GetAll{{ component }}()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Write(response)
}

// @GET("/:id")
func (controller {{ component }}Controller) get{{ component }}ByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err0 := strconv.ParseUint(params["id"], 10, 32)
    if err0 != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	response, err := controller.service.Get{{ component }}ByID(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	w.Write(response)
}

// @POST("/")
func (controller {{ component }}Controller) create{{ component }}(w http.ResponseWriter, r *http.Request) {
	decoder := json.NewDecoder(r.Body)
	var m models.{{ component }}Model
	err := decoder.Decode(&m)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	resp, err := controller.service.Create{{ component }}(m)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	w.Write(resp)
}

// @DELETE("/:id")
func (controller {{ component }}Controller) delete{{ component }}ByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := strconv.ParseUint(params["id"], 10, 32)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	response, err := controller.service.Delete{{ component }}ByID(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	w.Write(response)
}

// @PUT("/:id")
func (controller {{ component }}Controller) update{{ component }}ByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)

	id, err := strconv.ParseUint(params["id"], 10, 32)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	decoder := json.NewDecoder(r.Body)
	var m models.{{ component }}Model
	err2 := decoder.Decode(&m)
	if err2 != nil {
		http.Error(w, err2.Error(), http.StatusBadRequest)
		return
	}

	response, err3 := controller.service.Update{{ component }}ByID(id, g)
	if err3 != nil {
		http.Error(w, err3.Error(), http.StatusBadRequest)
		return
	}
	w.Write(response)
}
